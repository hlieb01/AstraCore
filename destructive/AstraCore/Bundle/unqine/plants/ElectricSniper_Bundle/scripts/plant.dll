using System;
using Newtonsoft.Json;
using System.IO;

namespace ModDependencyChecker
{
    public class DependencyChecker
    {
        // Структура для загрузки данных из dependencies.json
        public class Dependencies
        {
            public class Compatibility
            {
                public string min_version { get; set; }
                public string max_version { get; set; }
            }

            public Compatibility compatibility { get; set; }
            public string game_version { get; set; }
        }

        // Метод для проверки совместимости
        public static string CheckCompatibility(string jsonFilePath)
        {
            try
            {
                // Чтение файла dependencies.json
                string json = File.ReadAllText(jsonFilePath);
                Dependencies dependencies = JsonConvert.DeserializeObject<Dependencies>(json);

                // Получение версии игры
                string gameVersion = dependencies.game_version;

                // Проверка на минимальную и максимальную совместимость версий
                if (string.Compare(gameVersion, dependencies.compatibility.min_version) < 0 || string.Compare(gameVersion, dependencies.compatibility.max_version) > 0)
                {
                    return "Ошибка: версия игры несовместима с модом.";
                }
                else
                {
                    return "Версия игры совместима с модом.";
                }
            }
            catch (Exception ex)
            {
                return "Ошибка при чтении файла зависимостей: " + ex.Message;
            }
        }
    }
}
